#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         loadData
# Date:         30.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function loads the mission profile (training) when pressing the load data button.
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.data.loadData import loadMat, loadPkl, loadXlsx

# ==============================================================================
# External
# ==============================================================================
from os.path import join as pjoin


#######################################################################################################################
# Additional Functions
#######################################################################################################################


#######################################################################################################################
# Main Function
#######################################################################################################################
def loadData(dataType, path, folder, name, setupMat):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Variables
    # ==============================================================================
    data = {}
    units = {}

    # ==============================================================================
    # Path
    # ==============================================================================
    # ------------------------------------------
    # File Extension
    # ------------------------------------------
    name = name + '.' + type

    # ------------------------------------------
    # Path
    # ------------------------------------------
    if folder == "":
        filename = pjoin(path, name)
        print("INFO: Loading dataset from head-folder: \data")
    else:
        try:
            filename = pjoin(path, folder, name)
            print("INFO: Loading dataset from sub-folder: \data\ " + str(folder))
        except:
            filename = pjoin(path, name)
            msg = "WARN: Sub-folder not found trying head-folder: \data"
            print(msg)

    ###################################################################################################################
    # Loading
    ###################################################################################################################
    # ==============================================================================
    # Excel
    # ==============================================================================
    if dataType == 'xlsx' or dataType == 'csv':
        [data, _] = loadXlsx(filename, data, units)

    # ==============================================================================
    # Mat-file
    # ==============================================================================
    elif dataType == 'mat':
        [data, _, _] = loadMat(filename, setupMat, data, units)

    # ==============================================================================
    # Pkl-file
    # ==============================================================================
    elif dataType == 'pkl':
        [data, _] = loadPkl(filename, data, units)

    # ==============================================================================
    # Default
    # ==============================================================================
    else:
        print("ERROR: Data format not available")

    ###################################################################################################################
    # Post-Process
    ###################################################################################################################
    try:
        dataset_name = name
        sampling_rate = data['X']['time'].iloc[1] - data['X']['time'].iloc[0]
        duration = data['X']['time'].iloc[-1] / 3600
        dropdown1_options = data['X'].columns
        dropdown2_options = data['y'].columns
    except:
        dataset_name = "Sample Dataset"
        sampling_rate = 60
        duration = 3600
        dropdown1_options = ["Option 1", "Option 2", "Option 3"]
        dropdown2_options = ["Choice A", "Choice B", "Choice C"]

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return data, dataset_name, sampling_rate, duration, dropdown1_options, dropdown2_options

#######################################################################################################################
# References
#######################################################################################################################
