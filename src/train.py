#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         train
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function trains an arbitrary disaggregation model. First the data is pre-processed, block-framed and features are
extracted. Afterward the input feature vector is fed to a model. Various models are implemented including machine
learning, deep learning, pattern matching, and source separation.
Inputs:     1) data:         includes all training and validation data files
            2) setup:        includes all simulation variables
Outputs:    None
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.preprocess import preprocess
from src.general.framing import framing
from src.general.features1D import features1D
from src.general.features2D import features2D
from src.general.createSeq import createSeq
from src.model.trainMdlTF import trainMdlTF
from src.model.trainMdlPT import trainMdlPT
from src.model.trainMdlSK import trainMdlSK
from src.model.trainMdlPM import trainMdlPM
from src.model.trainMdlSS import trainMdlSS
from src.model.trainMdlCU import trainMdlCU
from src.general.adaptDim import adaptDim, adaptDimHF
from src.general.helpFnc import activeSection, balanceData
from src.data.summaryData import summaryData
from src.general.sanityCheck import sanityCheck

# ==============================================================================
# External
# ==============================================================================
import copy
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def train(data, setupExp, setupDat, setupPar, setupMdl):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Running BaseNILM (Training)")
    print("\n")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    dataTrain = {'T': {}, 'V': {}}

    ###################################################################################################################
    # Data and Sanity
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Data and Sanity")
    print("------------------------------------------")

    # ==============================================================================
    # Sanity Check
    # ==============================================================================
    setupExp = sanityCheck(data['T']['X'], data['T']['y'], setupExp, setupPar, setupMdl)

    # ==============================================================================
    # Data Summary
    # ==============================================================================
    if setupDat['freq'] != 'HF':
        summaryData(data['T']['X'], data['T']['y'], setupDat)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Preprocessing")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    [data['T'], _, _, setupExp] = preprocess(data['T'], copy.deepcopy(setupDat), setupExp)
    [data['V'], _, _, setupExp] = preprocess(data['V'], setupDat, setupExp)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Framing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Framing and Edge Detection")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    # ------------------------------------------
    # LF Data
    # ------------------------------------------
    if setupDat['freq'] == 'LF':
        if setupPar['frame'] == 1:
            dataTrain['T']['X'] = framing(data['T']['X'], setupPar['window'], setupPar['overlap'])
            dataTrain['T']['y'] = framing(data['T']['y'], setupPar['window'], setupPar['overlap'])
            dataTrain['V']['X'] = framing(data['V']['X'], setupPar['window'], setupPar['overlap'])
            dataTrain['V']['y'] = framing(data['V']['y'], setupPar['window'], setupPar['overlap'])
        else:
            dataTrain['T']['X'] = data['T']['X'].values
            dataTrain['T']['y'] = data['T']['y'].values
            dataTrain['V']['X'] = data['V']['X'].values
            dataTrain['V']['y'] = data['V']['y'].values
            print("INFO: No frames calculated using raw data")

    # ------------------------------------------
    # HF Data
    # ------------------------------------------
    else:
        dataTrain['T']['X'] = adaptDimHF(data['T']['X'], setupDat, setupPar)
        dataTrain['V']['X'] = adaptDimHF(data['V']['X'], setupDat, setupPar)
        dataTrain['T']['y'] = data['T']['y'].values
        dataTrain['V']['y'] = data['V']['y'].values

    # ==============================================================================
    # Balancing
    # ==============================================================================
    if setupPar['frame'] == 1 and setupDat['balance'] == 2:
        [dataTrain['T']['X'], dataTrain['T']['y'], setupExp] = balanceData(dataTrain['T']['X'], dataTrain['T']['y'], setupDat, setupExp, 1)
        [dataTrain['V']['X'], dataTrain['V']['y'], setupExp] = balanceData(dataTrain['V']['X'], dataTrain['V']['y'], setupDat, setupExp, 1)
        print("INFO: Data equally balanced")
    elif setupPar['frame'] == 0 and setupDat['balance'] == 2:
        rate = activeSection(dataTrain['T']['X'], dataTrain['T']['y'], setupDat, setupExp)
        print("INFO: No frames data cannot be balanced, average activity: %6.4f %%" % np.mean(rate))
    else:
        print("INFO: Data is not balanced")

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Features
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Feature Extraction")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['feat'] == 1 or setupPar['feat'] == 3:
        dataTrain['T']['X'] = features1D(dataTrain['T']['X'], setupMdl['feat'])
        dataTrain['V']['X'] = features1D(dataTrain['V']['X'], setupMdl['feat'])
    elif setupPar['feat'] == 4:
        dataTrain['T']['X'] = features2D(dataTrain['T']['X'], setupMdl['feat2D'])
        dataTrain['V']['X'] = features2D(dataTrain['V']['X'], setupMdl['feat2D'])
    else:
        print("INFO: No features calculated using raw data")

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Sequence
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Creating Input Sequence")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['frame'] == 1:
        dataTrain['T']['y'] = createSeq(dataTrain['T']['y'], setupPar)
        dataTrain['V']['y'] = createSeq(dataTrain['V']['y'], setupPar)

    # ==============================================================================
    # Adapt Dimension
    # ==============================================================================
    [dataTrain['T']['X'], dataTrain['T']['y'], _, setupExp] = adaptDim(dataTrain['T']['X'], dataTrain['T']['y'], setupPar, setupExp)
    [dataTrain['V']['X'], dataTrain['V']['y'], _, setupExp] = adaptDim(dataTrain['V']['X'], dataTrain['V']['y'], setupPar, setupExp)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Training
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Training")
    print("------------------------------------------")

    # ==============================================================================
    # Model
    # ==============================================================================
    # ------------------------------------------
    # Tensorflow (TF)
    # ------------------------------------------
    if setupPar['solver'] == 'TF':
        trainMdlTF(dataTrain, setupDat, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # PyTorch (PT)
    # ------------------------------------------
    elif setupPar['solver'] == 'PT':
        trainMdlPT(dataTrain, setupDat, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # Sklearn (SK)
    # ------------------------------------------
    elif setupPar['solver'] == 'SK':
        trainMdlSK(dataTrain, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # Pattern Matching (PM)
    # ------------------------------------------
    elif setupPar['solver'] == 'PM':
        trainMdlPM(dataTrain, setupPar, setupExp)

    # ------------------------------------------
    # Source Separation (SS)
    # ------------------------------------------
    elif setupPar['solver'] == 'SS':
        trainMdlSS(dataTrain, setupDat, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # Custom (CU)
    # ------------------------------------------
    elif setupPar['solver'] == 'CU':
        trainMdlCU(dataTrain, setupDat, setupPar, setupMdl, setupExp)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("DONE: Running BaseNILM (Training)")
    print('----------------------')
    print("\n\n")
