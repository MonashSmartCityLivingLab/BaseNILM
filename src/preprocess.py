#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         preprocess
# Date:         21.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.2
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.data.resampleData import resampleData
from src.data.normData import normData
from src.data.filterData import filterData
from src.general.helpFnc import addNoise
from src.data.addGhost import addGhost

# ==============================================================================
# External
# ==============================================================================


#######################################################################################################################
# Function
#######################################################################################################################
def preprocess(data, setupDat, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Preprocessing data (X,y)")

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Resampling
    # ==============================================================================
    [data['X'], timeX] = resampleData(data['X'], setupDat['fs_raw_X'], setupDat)
    [data['y'], timeY] = resampleData(data['y'], setupDat['fs_raw_y'], setupDat)

    # ==============================================================================
    # Removing Values
    # ==============================================================================
    idX = data['X']['id']
    idY = data['y']['id']
    data['X'] = data['X'].drop(['time', 'id'], axis=1)
    data['y'] = data['y'].drop(['time', 'id'], axis=1)

    # ==============================================================================
    # Ghost Power
    # ==============================================================================
    if setupDat['ghost'] != 0:
        [data['X'], data['y']] = addGhost(data['X'], data['y'], setupDat)
    else:
        print("INFO: Ghost power will not be used")

    # ==============================================================================
    # Filtering
    # ==============================================================================
    # ------------------------------------------
    # Input
    # ------------------------------------------
    if setupDat['inpFil'] != 0:
        data['X'] = filterData(data['X'], setupDat['inpFil'], setupDat['inpFilLen'])
    else:
        print("INFO: Input data will not be filtered")

    # ------------------------------------------
    # Output
    # ------------------------------------------
    if setupDat['outFil'] != 0:
        data['y'] = filterData(data['y'], setupDat['outFil'], setupDat['outFilLen'])
    else:
        print("INFO: Output data will not be filtered")

    # ==============================================================================
    # Adding Noise
    # ==============================================================================
    # ------------------------------------------
    # Input
    # ------------------------------------------
    if setupDat['inpNoise'] != 0:
        data['X'] = addNoise(data['X'], setupDat['inpNoise'])
    else:
        print("INFO: Input noise will not be added")

    # ------------------------------------------
    # Output
    # ------------------------------------------
    if setupDat['outNoise'] != 0:
        data['y'] = addNoise(data['y'], setupDat['outNoise'])
    else:
        print("INFO: Output noise will not be added")

    # ==============================================================================
    # Normalizing
    # ==============================================================================
    [data['X'], data['y'], setupExp] = normData(data['X'], data['y'], setupDat, setupExp, 0)

    ###################################################################################################################
    # Post-processing
    ###################################################################################################################
    # ==============================================================================
    # Sanity Check
    # ==============================================================================
    timeX = timeX[0:min(timeX.shape[0], timeY.shape[0])]
    timeY = timeX[0:min(timeX.shape[0], timeY.shape[0])]
    idX = idX[0:min(idX.shape[0], idY.shape[0])]
    idY = idX[0:min(idX.shape[0], idY.shape[0])]
    data['X'] = data['X'][0:min(data['y'].shape[0], data['X'].shape[0])]
    data['y'] = data['y'][0:min(data['y'].shape[0], data['X'].shape[0])]

    # ==============================================================================
    # Reset Index
    # ==============================================================================
    data['X'] = data['X'].reset_index(drop=True)
    data['y'] = data['y'].reset_index(drop=True)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [data, timeY, idY, setupExp]
