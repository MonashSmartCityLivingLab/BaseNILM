#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         test
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function test an arbitrary disaggregation model. First the data is pre-processed, block-framed and features are
extracted. Afterward the input feature vector is fed to a model predicting the results which are post-processed after.
The trained models are loaded from \mdl and the results are saved to \results. Various models are implemented including
machine learning, deep learning, pattern matching, and source separation.
Inputs:     1) data:         includes all training and validation data files
            2) setup:        includes all simulation variables
            3) setupPath:    includes all path variables
Outputs:    1) results:      simulation results
            2) resultsAvg:   averaged results for cross-validation
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.preprocess import preprocess
from src.postprocess import postprocess
from src.general.framing import framing
from src.general.features1D import features1D
from src.general.features2D import features2D
from src.general.createSeq import createSeq
from src.model.testMdlTF import testMdlTF
from src.model.testMdlSK import testMdlSK
from src.model.testMdlPM import testMdlPM
from src.model.testMdlPT import testMdlPT
from src.model.testMdlSS import testMdlSS
from src.model.testMdlCU import testMdlCU
from src.general.performance import performance
from src.general.plotting import plotting
from src.general.printResults import printResults
from src.general.save import save
from src.general.featureRank import featureRank
from src.general.adaptDim import adaptDim, adaptDimHF
from src.data.summaryData import summaryData
from src.general.sanityCheck import sanityCheck

# ==============================================================================
# External
# ==============================================================================


#######################################################################################################################
# Function
#######################################################################################################################
def test(data, setupExp, setupDat, setupPar, setupMdl, setupPath):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Running PyDTS (Testing)")
    print("\n")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    dataTest = {'T': {}, 'V': {}}
    dataPred = {'T': {'X': [], 'y': []}}

    ###################################################################################################################
    # Data and Sanity
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Data and Sanity")
    print("------------------------------------------")

    # ==============================================================================
    # Sanity Check
    # ==============================================================================
    setupExp = sanityCheck(data['T']['X'], data['T']['y'], setupExp, setupPar, setupMdl)

    # ==============================================================================
    # Data Summary
    # ==============================================================================
    if setupDat['freq'] != 'HF':
        summaryData(data['T']['X'], data['T']['y'], setupDat)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Preprocessing")
    print("------------------------------------------")

    # ==============================================================================
    # Testing Data
    # ==============================================================================
    [data['T'], _, _, setupExp] = preprocess(data['T'], setupDat, setupExp)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Framing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Framing and Edge Detection")
    print("------------------------------------------")

    # ==============================================================================
    # Testing Data
    # ==============================================================================
    # ------------------------------------------
    # LF Data
    # ------------------------------------------
    if setupDat['freq'] == 'LF':
        if setupPar['frame'] == 1:
            if setupPar['overlap'] == -1:
                dataTest['T']['X'] = framing(data['T']['X'], setupPar['window'], 0)
                dataTest['T']['y'] = framing(data['T']['y'], setupPar['window'], 0)
            else:
                if setupPar['outseq'] == 0:
                    dataTest['T']['X'] = framing(data['T']['X'], setupPar['window'], setupPar['window'] - 1)
                    dataTest['T']['y'] = framing(data['T']['y'], setupPar['window'], setupPar['window'] - 1)
                else:
                    dataTest['T']['X'] = framing(data['T']['X'], setupPar['window'], setupPar['window'] - setupPar['outseq'])
                    dataTest['T']['y'] = framing(data['T']['y'], setupPar['window'], setupPar['window'] - setupPar['outseq'])
        else:
            dataTest['T']['X'] = data['T']['X'].values
            dataTest['T']['y'] = data['T']['y'].values
            print("INFO: No frames calculated using raw data")

    # ------------------------------------------
    # HF Data
    # ------------------------------------------
    else:
        dataTest['T']['X'] = adaptDimHF(data['T']['X'], setupDat, setupPar)
        dataTest['T']['y'] = data['T']['y'].values

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Features
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Feature Extraction")
    print("------------------------------------------")

    # ==============================================================================
    # Testing Data
    # ==============================================================================
    if setupPar['feat'] == 1 or setupPar['feat'] == 3:
        dataTest['T']['X'] = features1D(dataTest['T']['X'], setupMdl['feat'])
    elif setupPar['feat'] == 4:
        dataTest['T']['X'] = features2D(dataTest['T']['X'], setupMdl['feat2D'])
    else:
        print("INFO: No features calculated using raw data")

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Sequence
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Creating Input Sequence")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['frame'] == 1:
        dataTest['T']['y'] = createSeq(dataTest['T']['y'], setupPar)

    # ==============================================================================
    # Adapt Dimension
    # ==============================================================================
    [dataTest['T']['X'], dataTest['T']['y'], ndim, setupExp] = adaptDim(dataTest['T']['X'], dataTest['T']['y'], setupPar, setupExp)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Training
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Testing")
    print("------------------------------------------")

    # ==============================================================================
    # Model
    # ==============================================================================
    # ------------------------------------------
    # Tensorflow (TF)
    # ------------------------------------------
    if setupPar['solver'] == 'TF':
        dataPred = testMdlTF(dataTest, setupDat, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # PyTorch (PT)
    # ------------------------------------------
    elif setupPar['solver'] == 'PT':
        dataPred = testMdlPT(dataTest, setupDat, setupPar, setupExp)

    # ------------------------------------------
    # Sklearn (SK)
    # ------------------------------------------
    elif setupPar['solver'] == 'SK':
        dataPred = testMdlSK(dataTest, setupPar, setupExp)

    # ------------------------------------------
    # Pattern Matching (PM)
    # ------------------------------------------
    elif setupPar['solver'] == 'PM':
        dataPred = testMdlPM(dataTest, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # Source Separation (SS)
    # ------------------------------------------
    elif setupPar['solver'] == 'SS':
        dataPred = testMdlSS(dataTest, setupDat, setupPar, setupExp)

    # ------------------------------------------
    # Custom (CU)
    # ------------------------------------------
    elif setupPar['solver'] == 'CU':
        dataPred = testMdlCU(dataTest, setupDat, setupPar, setupMdl, setupExp)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ####################################################################################################################
    # Post-Processing
    ####################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Postprocessing")
    print("------------------------------------------")

    # ==============================================================================
    # Unfold
    # ==============================================================================
    if len(ndim) == 2:
        dataTest['T']['X'] = dataTest['T']['X'].reshape((dataTest['T']['X'].shape[0], ndim[1]))
        dataPred['T']['X'] = dataPred['T']['X'].reshape((dataPred['T']['X'].shape[0], ndim[1]))
    else:
        dataTest['T']['X'] = dataTest['T']['X'].reshape((dataTest['T']['X'].shape[0], ndim[1], ndim[2]))
        dataPred['T']['X'] = dataPred['T']['X'].reshape((dataPred['T']['X'].shape[0], ndim[1], ndim[2]))

    # ==============================================================================
    # Calc
    # ==============================================================================
    [dataTest['T'], dataPred['T'], setupExp] = postprocess(dataTest['T'], dataPred['T'], setupPar, setupDat, setupExp)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ####################################################################################################################
    # Output
    ####################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Output")
    print("------------------------------------------")

    # ==============================================================================
    # Performance
    # ==============================================================================
    # ------------------------------------------
    # Error
    # ------------------------------------------
    [result, resultAvg] = performance(dataPred['T']['y'], dataTest['T']['y'], dataPred['T']['L'], dataTest['T']['L'], setupDat)

    # ------------------------------------------
    # Ranking
    # ------------------------------------------
    [feaScore, feaError] = featureRank(data['T']['X'], data['T']['y'], setupDat, setupMdl, setupPar)

    # ==============================================================================
    # Console
    # ==============================================================================
    printResults(result, resultAvg, setupDat, setupExp)

    # ==============================================================================
    # Plotting
    # ==============================================================================
    if setupExp['plot'] != 0:
        plotting(data, dataTest['T'], dataPred['T'], resultAvg, feaScore, feaError, setupDat)

    # ==============================================================================
    # Saving
    # ==============================================================================
    if setupExp['save'] != 0:
        save(dataTest['T']['y'], dataPred['T']['y'], result, resultAvg, setupDat, setupPar, setupExp, setupPath)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("DONE: Running PyDTS (Testing)")

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [result, resultAvg]
