#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         optiHyp
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function optimises the parameters of a deep neural network using tensorflow. For visualization tensorboard is used
displaying the progress as well as the optimised parameters. Furthermore, optimisation using machine learning based
algorithms are also possible. This optimisation is done using sklearn.
Inputs:     1) setup:        includes all simulation variables
            2) setupPath:    includes all path variables
Outputs:    None
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.data.loadData import loadData
from src.preprocess import preprocess
from src.general.framing import framing
from src.general.features1D import features1D
from src.general.features2D import features2D
from src.general.createSeq import createSeq
from src.model.trainMdlTFopti import trainMdlTFopti
from src.model.trainMdlSKopti import trainMdlSKopti
from src.general.adaptDim import adaptDim

# ==============================================================================
# External
# ==============================================================================
import copy


#######################################################################################################################
# Function
#######################################################################################################################
def optiHyp(setupExp, setupDat, setupPar, setupMdl, setupPath):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("----------------------------------------------------------------------------------------------------------")
    print("----------------------------------------------------------------------------------------------------------")
    print("Welcome to BaseNILM: A toolkit for energy disaggregation")
    print("Mode:       Optimising Hyperparameter")
    print("Author:     Dr. Pascal A. Schirmer")
    print("Copyright:  Pascal Schirmer")
    print("Version:    v.0.2")
    print("Date:       21.11.2023")
    print("----------------------------------------------------------------------------------------------------------")
    print("----------------------------------------------------------------------------------------------------------")
    print("\n\n")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    method = 2
    setupExp['log'] = 1

    # ==============================================================================
    # Variables
    # ==============================================================================
    nameTrain = setupDat['train'][0]
    data = {}
    dataTrain = {'T': {}, 'V': {}}

    ###################################################################################################################
    # Loading Data
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Loading Data")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    [data['T'], setupDat, setupExp] = loadData(setupExp, setupDat, setupPar, setupMdl, setupPath, nameTrain, method, 1, [])
    [data['V'], _, setupExp] = loadData(setupExp, copy.deepcopy(setupDat), setupPar, setupMdl, setupPath, nameTrain, method, 2, [])

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Preprocessing")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    [data['T'], _, _, setupExp] = preprocess(data['T'], setupDat, setupExp)
    [data['V'], _, _, setupExp] = preprocess(data['V'], setupDat, setupExp)

    ###################################################################################################################
    # Framing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Framing and Edge Detection")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['frame'] == 1:
        dataTrain['T']['X'] = framing(data['T']['X'], setupPar['window'], setupPar['overlap'])
        dataTrain['T']['y'] = framing(data['T']['y'], setupPar['window'], setupPar['overlap'])
        dataTrain['V']['X'] = framing(data['V']['X'], setupPar['window'], setupPar['overlap'])
        dataTrain['V']['y'] = framing(data['V']['y'], setupPar['window'], setupPar['overlap'])
    else:
        dataTrain['T']['X'] = data['T']['X'].values
        dataTrain['T']['y'] = data['T']['y'].values
        dataTrain['V']['X'] = data['V']['X'].values
        dataTrain['V']['y'] = data['V']['y'].values

    ###################################################################################################################
    # Features
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Feature Extraction")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['feat'] == 1 or setupPar['feat'] == 3:
        dataTrain['T']['X'] = features1D(dataTrain['T']['X'], setupMdl['feat'])
        dataTrain['V']['X'] = features1D(dataTrain['V']['X'], setupMdl['feat'])
    elif setupPar['feat'] == 4:
        dataTrain['T']['X'] = features2D(dataTrain['T']['X'], setupMdl['feat2D'])
        dataTrain['V']['X'] = features2D(dataTrain['V']['X'], setupMdl['feat2D'])
    else:
        print("INFO: No features calculated using raw data")

    ###################################################################################################################
    # Sequence
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Creating Input Sequence")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['frame'] == 1:
        dataTrain['T']['y'] = createSeq(dataTrain['T']['y'], setupPar)
        dataTrain['V']['y'] = createSeq(dataTrain['V']['y'], setupPar)

    # ==============================================================================
    # Adapt Dimension
    # ==============================================================================
    [dataTrain['T']['X'], dataTrain['T']['y'], _, setupExp] = adaptDim(dataTrain['T']['X'], dataTrain['T']['y'], setupPar, setupExp)
    [dataTrain['V']['X'], dataTrain['V']['y'], _, setupExp] = adaptDim(dataTrain['V']['X'], dataTrain['V']['y'], setupPar, setupExp)

    ###################################################################################################################
    # Training
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Optimising Hyperparameters")
    print("------------------------------------------")

    # ==============================================================================
    # Model
    # ==============================================================================
    # ------------------------------------------
    # Machine Learning
    # ------------------------------------------
    if setupPar['solver'] == 'SK':
        trainMdlSKopti(dataTrain, setupPar)

    # ------------------------------------------
    # Deep Learning
    # ------------------------------------------
    elif setupPar['solver'] == 'TF':
        trainMdlTFopti(dataTrain, setupDat, setupPar, setupMdl, setupExp)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("DONE: Running PyDTS (Optimising)")
    print('----------------------')
