#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         sanityCheck
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function check the input data for sanity as well as check the RAM limitations of the machine.
Inputs:     1) X:       input feature vector (based on aggregated consumption)
            2) y:       output vector (electrical appliance consumption)
            3) setup:   includes all simulation variables
Outputs:    1) setup:   updated setup file
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.general.helpFnc import warnMsg

# ==============================================================================
# External
# ==============================================================================
from psutil import virtual_memory


#######################################################################################################################
# Function
#######################################################################################################################
def sanityCheck(X, y, setupExp, setupPar, setupMdl):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Sanity check before the simulation")

    ###################################################################################################################
    # Init
    ###################################################################################################################
    # ==============================================================================
    # Data
    # ==============================================================================
    F = len(X.columns) - 2
    M = len(y.columns) - 2
    L = len(X.id)
    xBytes = 16

    # ==============================================================================
    # Other
    # ==============================================================================
    RAM_machine = virtual_memory().total

    ###################################################################################################################
    # General Settings
    ###################################################################################################################
    # ==============================================================================
    # RAM
    # ==============================================================================
    # ------------------------------------------
    # Calc
    # ------------------------------------------
    if setupPar['feat'] == 0 or setupPar['feat'] == 2 or setupPar['feat'] == 3:
        RAM_use = (M + F) * L * setupPar['window'] / (setupPar['window'] - setupPar['overlap']) * xBytes
    elif setupPar['feat'] == 4:
        RAM_use = (M + F) * L * setupPar['window'] ** 2  / (setupPar['window'] - setupPar['overlap']) * xBytes
    else:
        RAM_use = (M + F) * L * sum(setupMdl['feat'].values()) / (setupPar['window'] - setupPar['overlap']) * xBytes

    # ------------------------------------------
    # Check
    # ------------------------------------------
    if RAM_machine / RAM_use > 10:
        print("INFO: Machine has enough memory, input size: %5.2f GB" % (RAM_use/1024/1024/1024))
    elif RAM_machine / RAM_use > 5:
        msg = "WARN: Machine might run out of memory"
        setupExp = warnMsg(msg, 1, 0, setupExp)
        print("WARN: Machine might run out of memory, input size: %5.2f GB" % (RAM_use/1024/1024/1024))
    elif RAM_machine / RAM_use > 2:
        msg = "WARN: Machine likely to run out of memory"
        setupExp = warnMsg(msg, 2, 0, setupExp)
        print("WARN: Machine likely to run out of memory, input size: %5.2f GB" % (RAM_use / 1024 / 1024 / 1024))
    else:
        print("ERROR: Machine will run out of memory, input size: %5.2f GB" % (RAM_use/1024/1024/1024))

    ###################################################################################################################
    # Mission Profile
    ###################################################################################################################
    # ==============================================================================
    # Sampling and Samples
    # ==============================================================================

    # ==============================================================================
    # Units and Labels
    # ==============================================================================

    # ==============================================================================
    # Dimensionality
    # ==============================================================================

    ###################################################################################################################
    # Parameters
    ###################################################################################################################
    # ==============================================================================
    # Solver
    # ==============================================================================

    # ==============================================================================
    # Model
    # ==============================================================================

    # ==============================================================================
    # Pre-processing
    # ==============================================================================

    # ==============================================================================
    # Framing and Features
    # ==============================================================================

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return setupExp
