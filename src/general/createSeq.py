#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         createSeq
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function sequences the input using a specific window length with overlap.
Inputs:     1) data:    input data
            2) setup:   includes all simulation variables
Outputs:    1) data:    sequenced output data
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def createSeq(data, setupPar):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Creating input sequence")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    dim = data.ndim
    sel = setupPar['yFocus']

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    if sel > setupPar['window']:
        sel = setupPar['window']

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Seq2seq or Seq2Subseq
    # ==============================================================================
    if setupPar['outseq'] >= 1:
        if dim == 1:
            delta = int((setupPar['window'] - setupPar['outseq']) / 2)
            data = np.squeeze(data[:, delta:setupPar['window'] - delta])
        else:
            delta = int((setupPar['window'] - setupPar['outseq']) / 2)
            data = np.squeeze(data[:, delta:setupPar['window'] - delta, :])

    # ==============================================================================
    # Seq2point
    # ==============================================================================
    if setupPar['outseq'] == 0:
        if sel < 0:
            data = np.nanmean(data, axis=1)
        else:
            if dim == 1:
                data = np.squeeze(data[:, int(sel)])
            else:
                data = np.squeeze(data[:, int(sel), :])

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return data
