#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         printResults
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function prints the accuracy results into the console.
"""


#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================

#######################################################################################################################
# Function
#######################################################################################################################
def printResults(resultsApp, resultsAvg, setupDat, setupExp):
    ####################################################################################################################
    # Welcome Message
    ####################################################################################################################
    print("INFO: Printing results on console")

    ####################################################################################################################
    # Warning
    ####################################################################################################################
    # ==============================================================================
    # Overview
    # ==============================================================================
    print("INFO: Simulation completed with %d low priority and %d high priority warnings" %
          (setupExp['status']['warnL']['count'], setupExp['status']['warnH']['count']))

    # ==============================================================================
    # Low Prio
    # ==============================================================================
    # ------------------------------------------
    # Msg
    # ------------------------------------------
    print("INFO: List of low priority warnings includes:")

    # ------------------------------------------
    # Print
    # ------------------------------------------
    for i in range(0, setupExp['status']['warnL']['count']):
        print("%d) %s:" % (i+1, setupExp['status']['warnL']['msg'][i]))

    # ==============================================================================
    # High Prio
    # ==============================================================================
    # ------------------------------------------
    # Msg
    # ------------------------------------------
    print("INFO: List of high priority warnings includes:")

    # ------------------------------------------
    # Print
    # ------------------------------------------
    for i in range(0, setupExp['status']['warnL']['count']):
        print("%d) %s:" % (i + 1, setupExp['status']['warnL']['msg'][i]))

    ####################################################################################################################
    # Accuracy values
    ####################################################################################################################
    # ==============================================================================
    # Info
    # ==============================================================================
    print("INFO: Printing accuracy results")

    # ==============================================================================
    # Results
    # ==============================================================================
    # ------------------------------------------
    # Init Msg
    # ------------------------------------------
    print('------------------------------------------------------------------------------------------------------------------------------------------')
    print('------------------------------------------------------------------------------------------------------------------------------------------')
    print('|          |    FINITE STATES   |                                  ESTIMATION                                    |   PERCENT OF TOTAL  |')
    print('| item ID  | ACCURACY | F-SCORE |  R2-Score  |    TECA    |    RMSE    |     MAE     |     MAX     |     SAE     |    EST    |  TRUTH  |')
    print('|----------|----------|---------|------------|------------|------------|-------------|-------------|-------------|-----------|---------|')

    # ------------------------------------------
    # Print
    # ------------------------------------------
    for i in range(0, setupDat['numOut']):
        print('| %-8s |  %6.2f%% | %6.2f%% |  %6.2f%%   |  %6.2f%%   |  %8.2f  |  %8.2f   |  %8.2f   |  %8.2f   |  %6.2f%%  | %6.2f%% |' % (
            setupDat['outLabel'][i], resultsApp[i, 0] * 100, resultsApp[i, 1] * 100, resultsApp[i, 2] * 100, resultsApp[i, 3]*100,
            resultsApp[i, 4], resultsApp[i, 5], resultsApp[i, 6], abs(resultsApp[i, 7]-resultsApp[i, 8])/resultsApp[i, 8], resultsApp[i, 7] * 100, resultsApp[i, 8] * 100))
        print('|----------|----------|---------|------------|------------|------------|-------------|-------------|-------------|-----------|---------|')

    # ------------------------------------------
    # Out Msg
    # ------------------------------------------
    print('|----------|----------|---------|------------|------------|------------|-------------|-------------|-------------|-----------|---------|')
    print('|    AVG   |  %6.2f%% | %6.2f%% |  %6.2f%%   |  %6.2f%%   |  %8.2f  |  %8.2f   |  %8.2f   |  %8.2f   |  %6.2f%%  | %6.2f%% |' % (
        resultsAvg[0] * 100, resultsAvg[1] * 100, resultsAvg[2] * 100, resultsAvg[3]*100, resultsAvg[4], resultsAvg[5], resultsAvg[6],
        abs(resultsAvg[7] - resultsAvg[8])/resultsAvg[8], resultsAvg[7] * 100, resultsAvg[8] * 100))
    print('------------------------------------------------------------------------------------------------------------------------------------------')
    print('------------------------------------------------------------------------------------------------------------------------------------------')
