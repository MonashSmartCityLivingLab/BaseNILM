#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         testMdlPT
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function implements the testing case of the deep learning based energy disaggregation using pytorch.
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.general.helpFnc import reshapeMdlData
from src.model.models import ptMdlDNN, ptMdlCNN

# ==============================================================================
# External
# ==============================================================================
import os
import tensorflow as tf
import torch
import time
import numpy as np
from sys import getsizeof


#######################################################################################################################
# Function
#######################################################################################################################
def testMdlPT(data, setupDat, setupPar, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Test Model (DL)")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # CPU/GPU
    # ==============================================================================
    if setupExp['gpu'] == 1:
        os.environ['CUDA_VISIBLE_DEVICES'] = '0'
        physical_devices = tf.config.list_physical_devices('GPU')
        tf.config.experimental.set_memory_growth(physical_devices[0], True)
    else:
        os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
        tf.config.set_visible_devices([], 'GPU')

    # ==============================================================================
    # Variables
    # ==============================================================================
    dataPred = {'T': {}}

    # ==============================================================================
    # Name
    # ==============================================================================
    mdlName = 'mdl/mdl_' + setupPar['model'] + '_' + setupExp['name'] + '.h5'

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Reshape Data
    # ==============================================================================
    # ------------------------------------------
    # Init
    # ------------------------------------------
    [data['T']['X'], data['T']['y']] = reshapeMdlData(data['T']['X'], data['T']['y'], setupDat, setupPar, 0)

    # ------------------------------------------
    # Switch Channels
    # ------------------------------------------
    if setupPar['modelInpDim'] == 3:
        data['T']['X'] = data['T']['X'].reshape((data['T']['X'].shape[0], data['T']['X'].shape[2], data['T']['X'].shape[1]))
    else:
        data['T']['X'] = data['T']['X'].reshape((data['T']['X'].shape[0], data['T']['X'].shape[2], data['T']['X'].shape[1], 1))

    # ==============================================================================
    # Converting Data
    # ==============================================================================
    data['T']['X'] = data['T']['X'].astype(np.float32)
    data['T']['y'] = data['T']['y'].astype(np.float32)

    # ==============================================================================
    # Model Input and Output
    # ==============================================================================
    if len(setupDat['out']) == 1:
        if setupPar['outseq'] >= 1:
            out = data['T']['y'].shape[1]
        else:
            out = 1
    else:
        out = len(setupDat['out'])

    # ==============================================================================
    # Create Model
    # ==============================================================================
    # ------------------------------------------
    # Init
    # ------------------------------------------
    if setupPar['method'] == 0:
        activation = 0
    else:
        activation = 1

    # ------------------------------------------
    # DNN
    # ------------------------------------------
    if setupPar['model'] == "DNN":
        if setupPar['modelInpDim'] == 3:
            mdl = ptMdlDNN(out, data['T']['X'].shape[1] * data['T']['X'].shape[2], activation)
        else:
            mdl = ptMdlDNN(out, data['T']['X'].shape[1] * data['T']['X'].shape[2] * data['T']['X'].shape[3], activation)

    # ------------------------------------------
    # CNN
    # ------------------------------------------
    elif setupPar['model'] == "CNN":
        if setupPar['modelInpDim'] == 3:
            mdl = ptMdlCNN(out, data['T']['X'].shape[2], data['T']['X'].shape[1], activation)
        else:
            mdl = ptMdlCNN(out, data['T']['X'].shape[2], data['T']['X'].shape[1], activation)

    # ------------------------------------------
    # Default
    # ------------------------------------------
    else:
        print("WARN: No correspondent model found trying DNN")
        if setupPar['modelInpDim'] == 3:
            mdl = ptMdlDNN(out, data['T']['X'].shape[1] * data['T']['X'].shape[2], activation)
        else:
            mdl = ptMdlDNN(out, data['T']['X'].shape[1] * data['T']['X'].shape[2] * data['T']['X'].shape[3], activation)

    # ==============================================================================
    # Show Model
    # ==============================================================================
    print(mdl)

    ###################################################################################################################
    # Loading
    ###################################################################################################################
    try:
        mdl.load_state_dict(torch.load(mdlName))
        print("INFO: Model loaded")
    except:
        print("ERROR: Model could not be loaded")

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Start timer
    # ==============================================================================
    start = time.time()

    # ==============================================================================
    # Calc
    # ==============================================================================
    target = mdl(torch.tensor(data['T']['X']))
    dataPred['T']['y'] = target.detach().numpy()
    dataPred['T']['X'] = data['T']['X']

    # ==============================================================================
    # End timer
    # ==============================================================================
    ende = time.time()
    testTime = (ende - start)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    print("INFO: Total inference time (ms): %.2f" % (testTime * 1000))
    print("INFO: Inference time per sample (us): %.2f" % (testTime / data['T']['X'].shape[0] * 1000 * 1000))
    print("INFO: Model size (kB): %.2f" % (getsizeof(mdl) / 1024 / 8))

    ###################################################################################################################
    # References
    ###################################################################################################################
    return dataPred
