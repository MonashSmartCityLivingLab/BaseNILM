#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         trainMdlPM
# Date:         23.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function implements the training case of the pattern matching based energy disaggregation.
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
from numpy import savez_compressed
import numpy as np
import time
from sys import getsizeof


#######################################################################################################################
# Function
#######################################################################################################################
def trainMdlPM(data, setupPar, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Training Model (PM)")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    numApp = data['T']['y'].shape[2]

    # ==============================================================================
    # Variables
    # ==============================================================================
    if setupPar['nDim'] == 2:
        mdl = np.zeros((data['T']['X'].shape[0], data['T']['X'].shape[1], data['T']['X'].shape[2], (numApp + 1)))
    else:
        mdl = np.zeros((data['T']['X'].shape[0], data['T']['X'].shape[1], (numApp + 1)))

    # ==============================================================================
    # Name
    # ==============================================================================
    mdlName = 'mdl/mdl_' + setupPar['model'] + '_' + setupExp['name'] + '.npz'

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Start timer
    # ==============================================================================
    start = time.time()

    # ==============================================================================
    # Model Input and Output
    # ==============================================================================
    if setupPar['nDim'] == 2:
        # ------------------------------------------
        # Init X
        # ------------------------------------------
        mdl[:, :, :, 0] = data['T']['X']

        # ------------------------------------------
        # Init y
        # ------------------------------------------
        for i in range(0, numApp):
            for ii in range(0, data['T']['X'].shape[2]):
                mdl[:, :, ii, i + 1] = data['T']['y'][:, :, i]

    else:
        # ------------------------------------------
        # Init X
        # ------------------------------------------
        mdl[:, :, 0] = data['T']['X']

        # ------------------------------------------
        # Init y
        # ------------------------------------------
        for i in range(0, numApp):
            mdl[:, :, i + 1] = data['T']['y'][:, :, i]

    # ==============================================================================
    # End timer
    # ==============================================================================
    ende = time.time()
    trainTime = (ende - start)

    # ==============================================================================
    # Saving Database
    # ==============================================================================
    savez_compressed(mdlName, mdl)

    ###################################################################################################################
    # Output
    ###################################################################################################################
    print("INFO: Total training time (sec): %.2f" % trainTime)
    print("INFO: Training time per sample (ms): %.2f" % (trainTime/data['T']['X'].shape[0]*1000))
    print("INFO: Model size (kB): %.2f" % (getsizeof(mdl) / 1024 / 8))
