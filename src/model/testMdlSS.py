#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         testMdlSS
# Date:         21.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.2
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
from numpy import load
from scipy import optimize
from tqdm import tqdm
from sklearn.decomposition import SparseCoder
import time
from sys import getsizeof


#######################################################################################################################
# Function
#######################################################################################################################
def testMdlSS(data, setupDat, setupPar, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Test Model (SS)")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Variables
    # ==============================================================================
    dataPred = {'T': {}}
    dataPred['T']['y'] = np.zeros((data['T']['X'].shape[0], data['T']['X'].shape[1], setupDat['numOut']))
    mdl = []

    # ==============================================================================
    # Name
    # ==============================================================================
    mdlName = 'mdl/mdl_' + setupPar['model'] + '_' + setupExp['name'] + '.npz'

    ###################################################################################################################
    # Loading
    ###################################################################################################################
    try:
        mdl = load(mdlName, allow_pickle=True)
        print("INFO: Model loaded")
    except:
        print("ERROR: Model could not be loaded")

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Start timer
    # ==============================================================================
    start = time.time()

    # ==============================================================================
    # Test
    # ==============================================================================
    # ------------------------------------------
    # NMF
    # ------------------------------------------
    if setupPar['model'] == "NMF":
        mdl = mdl['arr_0']
        for i in tqdm(range(0, data['T']['X'].shape[0])):
            A = optimize.nnls(mdl, np.squeeze(data['T']['X'][i, :], axis=1), maxiter=None)
            est = np.multiply(mdl, np.transpose(A[0]))
            est = np.reshape(est, (est.shape[0], int(est.shape[1] / setupDat['numOut']), setupDat['numOut']))
            dataPred['T']['y'][i, :, :] = np.sum(est, axis=1)

    # ------------------------------------------
    # DSC
    # ------------------------------------------
    elif setupPar['model'] == "DSC":
        # Init
        A, B, B_tilde, n = mdl['arr_0'], mdl['arr_1'], mdl['arr_2'], mdl['arr_3']
        mdl = SparseCoder(dictionary=B_tilde.T, positive_code=True, transform_algorithm='lasso_lars', transform_alpha=n)
        A_pred = mdl.transform(data['T']['X']).T
        start_comp = 0

        # Calc
        for i in range(0, setupDat['numOut']):
            dataPred['T']['y'][:, :, i] = np.transpose(np.matmul(B[:, start_comp:start_comp + n], A_pred[start_comp:start_comp + n, :]))
            start_comp += n

    # ------------------------------------------
    # Default
    # ------------------------------------------
    else:
        print("WARN: No correspondent model found trying DSC")
        # Init
        A, B, B_tilde, n = mdl['arr_0'], mdl['arr_1'], mdl['arr_2'], mdl['arr_3']
        mdl = SparseCoder(dictionary=B_tilde.T, positive_code=True, transform_algorithm='lasso_lars', transform_alpha=n)
        A_pred = mdl.transform(data['T']['X']).T
        start_comp = 0

        # Calc
        for i in range(0, setupDat['numOut']):
            dataPred['T']['y'][:, :, i] = np.transpose(np.matmul(B[:, start_comp:start_comp + n], A_pred[start_comp:start_comp + n, :]))
            start_comp += n

    # ==============================================================================
    # End timer
    # ==============================================================================
    ende = time.time()
    testTime = (ende - start)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Output
    # ==============================================================================
    dataPred['T']['X'] = data['T']['X']

    # ==============================================================================
    # Time
    # ==============================================================================
    print("INFO: Total inference time (ms): %.2f" % (testTime * 1000))
    print("INFO: Inference time per sample (us): %.2f" % (testTime / data['T']['X'].shape[0] * 1000 * 1000))
    print("INFO: Model size (kB): %.2f" % (getsizeof(mdl) / 1024 / 8))

    ###################################################################################################################
    # References
    ###################################################################################################################
    return dataPred
